@using System.ServiceModel
@model MvcHangman.Models.GameInfo

@{
    ViewBag.Title = "Index";
}

<h2>Guess world</h2>
<h2>
     @foreach (var character in Model.hiddenWorld)
     {
         var variable = false;
         foreach (var letter in Model.letterUsed)
         {
             if (letter == Char.ToUpper(character))
             {

                 variable = true;
                 break;
             }
            
         }
         if (variable == true)
             
         {
             
         @Html.Raw(character.ToString())

         }
         else
         {
           @Html.Raw("_ ")

         }
        
        
         }
    
   @* <div>

        @foreach (var alfa in Model.letterUsed)
        {
            if (Model.hiddenWorld.Contains(Char.ToLower(alfa)) == false)
            {
                Model.numberChoices = Model.numberChoices - 1;
            }
                
        }
       
    </div>*@
    <div>
        Number of choices left: 
      @Model.numberChoices
    </div>
    <div>
        Already used letter:
        @foreach (var b in Model.letterUsed)
        {
          @Html.Raw((char)b + ", ");
        }

    </div>
<div>
    
</div>
    <div>
        Letters: still available:
        @Model.str


    @* @foreach (var a in Model.lettersAvailable)
     {
       @Html.Raw((char)a + ", ");
      // @Model.lettersAvailable = Model.lettersAvailable.TrimEnd(',');
     
      }*@
       @* @for (char c = 'A'; c <= Model.lettersAvailable.Length; c++)
        {
           // if((char)a != null)
            if(c < Model.lettersAvailable.Length)
            {
             Html.Raw(c + ", ");
             c++;
            }
        }*@
       
      @* @for (char c = 'A'; c <= 'Z'; c++)
        {
            var items = string.Join("",c, ",");
            @Html.Raw(items.TrimEnd(','));
        
        }*@
      @* 
       @foreach (var item in Model.lettersAvailable)
       {
           string str1 = "";
           str1 = str1 + item + ",";
                                
           @Html.Raw(str1)
       }*@

                               
       
     </div>
    @using (Html.BeginForm())
    { 
       <div>
           @Html.HiddenFor(m => m.lettersAvailable)
           @Html.HiddenFor(m => m.hiddenWorld)
           @Html.HiddenFor(m => m.letterUsed)
           @Html.TextBoxFor(m => m.letterNext) <button type="submit">Try</button>
           @Html.ValidationMessageFor(m => m.letterNext)

       </div>
    }

</h2>
